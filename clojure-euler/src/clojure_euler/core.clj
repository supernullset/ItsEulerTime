(ns clojure-euler.core
  (:require [clojure.core.matrix :as m])
  (:require [criterium.core])
  (:require [clojure.core.reducers :as r]))


(defn zero-zero-one
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (let [
        div-by-three #(= 0 (mod %1 3))
        div-by-five #(= 0 (mod %1 5))
        multiples (for [index (range 1 1000)]
                    (if (or (div-by-five index) (div-by-three index)) index)
                    )]
    (reduce + (filter (comp not nil?) multiples))
    )
  ;; ANS => 233168
  )


;; using r/fold is faster than reduce. TODO: Investigate why
(defn fib-at-n
  "closed form matrix solution for fibonacci numbers"
  [n]
  (let [
        fib-matrix (m/matrix [[1N 1N] [1N 0N]])
        computed   (apply m/mmul (repeat n fib-matrix))
        fib-n      (get-in computed [1 1])
        fib-n-plus (get-in computed [1 0])
        fibs       (list fib-n fib-n-plus)
        ]
    fibs))

(defn fibs
  "get list of all fibonacci numbers unil n"
  [n]
  (let [
        nums (range 3 n 2)
        fibs (flatten (map fib-at-n nums))
        ]
    fibs))

(defn zero-zero-two []
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."
  (reduce + (filter even? (filter #(< %1 4000000) (fibs 100))))
  ;; => 4613732
  )

(defn prime? [n]
  (let [certainty 5]
    (.isProbablePrime (BigInteger/valueOf n) certainty)))

(defn primes-up-to [n]
  "returns primes up to a certain interger"
  (cons 2 (filter prime?
                  (take-nth 2
                            (range 1 n)))))

(defn first-n-primes [n]
  "returns primes up to a certain interger"
  (take n (primes-up-to Integer/MAX_VALUE)))


(defn zero-zero-three []
  "The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?"
  ;; not right
  ((fn [n]
     (first
      (filter #(and (zero? (rem n %))
                    (prime? %))
              (range (int (Math/sqrt n)) 0 -1)))) 600851475143)
)

(defn is-palendromic-number? [number]
  (= (str number) (clojure.string/reverse (str number)))
  )

(defn zero-zero-four []
  "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

  Find the largest palindrome made from the product of two 3-digit numbers."
  (reduce max (filter is-palendromic-number? (for [x (range 1 999) y (range 1 999)] (* x y))))
  )

(defn is-evenly-divisible? [n start end]
  (= #{true} (set (map #(zero? (rem n %)) (range start end))))
  )

;; TODO: THIS IS WAY TOO SLOW Tue Oct  7 21:37:59 PDT 2014

(defn zero-zero-five []
  "
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
"
(first (filter #(is-evenly-divisible? % 1 20) (range 1 Integer/MAX_VALUE))))

(defn sum-squares [start end]
  (apply + (map #(* % %) (range start (inc end)))))

(defn square-sum [start end]
  (int (Math/pow (apply + (range start (inc end))) 2)))

(defn zero-zero-six []
  "

The sum of the squares of the first ten natural numbers is,
12 + 22 + ... + 102 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
"
  (- (square-sum 1 100) (sum-squares 1 100))
  )


(defn zero-zero-seven []
  "

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
"
  (last (first-n-primes 10001)))

(defn zero-zero-eight []
  "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832. Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?"
  (let [huge-number "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
        parse-char #(Character/getNumericValue %)
        chunk 13]
    ;; Take 13 numbers at a time compute their *, keep, iterate to next 13 digits, compute *, if greater, discard previous; use atom?
    (loop [counter 0 number huge-number]
      (if (empty? number)
        counter
        (do
          (let [value (apply * (map parse-char (take chunk number)))
                new-number (rest number)]
            (if (< counter value)
              (recur value new-number)
              (recur counter new-number))))))))

(defn zero-zero-nine []
  "
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2

For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"
  (for [a (range 1 1000)
        b (range a 1000)
        c [(- 1000 a b)]
        :when (= (+ (* a a) (* b b)) (* c c))]
    (bigint (* a b c))))

(defn zero-one-zero []
  "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million."
  (apply + (primes-up-to 2000000)))

;;TODO: zero-one-one

(defn factors [n]
  (into (sorted-set)
        (mapcat (fn [x] [x (/ n x)])
                (filter #(zero? (rem n %)) (range 1 (inc (Math/sqrt n)))))))

(defn zero-one-two []
  "

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"
  (first (filter #(> 500 (count %)) (map factors (iterate inc 1)))))
