module P044 (main,
             pentagonalNumbers,
            ) where

---------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:                                                      --
--                                                                                                                                                           --
--                                                       1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...                                                         --
--                                                                                                                                                           --
-- It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.                                              --
-- Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D? --
---------------------------------------------------------------------------------------------------------------------------------------------------------------

import qualified Lib as L
import qualified Data.Set as S (member, fromList)

pentagonalNumbers :: [Integer]
pentagonalNumbers = [(n * (3*n-1)) `div` 2 | n <- [1..10000]] -- TODO: Understand the upper limit. Right now I do not

isPentagonal = (`S.member` S.fromList pentagonalNumbers)

findFirstPair = [ (x, y) |
                  x <- pentagonalNumbers,
                  y <- takeWhile (<x) pentagonalNumbers, -- This works nicely because pentagonalNumbers is already sorted
                  isPentagonal (x - y),
                  isPentagonal (x + y)
                ]

main = (\(x,y) -> x - y) $ head findFirstPair
