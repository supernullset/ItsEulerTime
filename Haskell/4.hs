{-
Step 1: is palendromic :: String -> Bool
step 2: take the last of the list of all palendromes generated by the two digit numbers

contraints: 2 Ints < 100
-}

module Main where
import Data.Char


isPalendrome :: String -> Bool
isPalendrome x | x == reverse x = True
               | otherwise = False

multiples = [ show $ fromIntegral x*y | x <- [1..999], y <- [1..999]]


main :: IO()
main = do
  let palindromes = filter (\x -> isPalendrome x) $ reverse multiples
  let result = maximum (map (\y -> read y :: Int) palindromes)
  print result 

{- solved 3/11/12
Solution from haskell wiki
problem_4 = maximum [ x | y <- [100..999],
                          z <- [y..999],
                          let x = y * z,
                          let s = show x,
                          s == reverse s ]
-}
